stages:
  - fetch_gdb
  - pre_check
  - static_analyzers
  - build_openocd
  - build_idf5.0.x
  - build_idf5.1.x
  - build_idf5.2.x
  - build_idf5.3.x
  - build_idf5.4.x
  - build_idf_master
  - build_nuttx
  - test_idf5.0.x
  - test_idf5.1.x
  - test_idf5.2.x
  - test_idf5.3.x
  - test_idf5.4.x
  - test_idf_master
  - test_host
  - test_nuttx
  - coverage
  - sanitizer_test_idf5.0.x
  - sanitizer_test_idf5.1.x
  - sanitizer_test_idf5.2.x
  - sanitizer_test_idf5.3.x
  - sanitizer_test_idf5.4.x
  - sanitizer_test_idf_master
  - sanitizer_test_nuttx
  - sanitizer_check_idf5.0.x
  - sanitizer_check_idf5.1.x
  - sanitizer_check_idf5.2.x
  - sanitizer_check_idf5.3.x
  - sanitizer_check_idf5.4.x
  - sanitizer_check_idf_master
  - sanitizer_check_nuttx
  - deploy
  - private_deploy
  - pre_release
  - release_stage1
  - release_submit
  - update_idf_tools

image: $CI_DOCKER_REGISTRY/openocd-ci-env:1

default:
  interruptible: true
  retry:
    max: 2
    when: runner_system_failure

variables:

  #
  # System environment

  # Common parameters for the 'make' during CI tests
  MAKEFLAGS: "-j4 --no-keep-going"

  GCOV_BUILD_OPTS: ""

  # OpenOCD configuration options
  OPENOCD_CONFIGURE_OPTS: "--disable-doxygen-html --enable-remote-bitbang"

  # GitHub Tool options
  GITHUB_USER: "${GH_USER}"
  GITHUB_REPO: "${GH_REPO}"
  GITHUB_TOKEN: "${GH_TOKEN}"

  #
  # CI settings

  # GIT_STRATEGY is not defined here, an option from "CI / CD Settings"- "General pipelines" is used.
  GIT_SUBMODULE_STRATEGY: none

  #
  # Customization of jobs

  DIST_ART_DIR: "dist"
  DIST_INSTALLED_DIR: "${CI_PROJECT_NAME}"
  ARCHIVE_TOOL: "tar czf"
  ARCHIVE_EXT: "tar.gz"
  RELEASE_DESC: "New release"

# prefix should be like a $CI_PROJECT_NAME, but we cannot use variable here
.release_tag_filter: &release_tag_filter
  only:
    - /^v[0-9].*$/
    - /^openocd-esp32-.*$/

.release_binaries: &release_binaries
  needs:
    - job: build_linux
    - job: build_linux_armhf
    - job: build_linux_armel
    - job: build_linux_arm64
    - job: build_windows_win32
    - job: build_windows_win64
    - job: macos_codesign

.release_submit_action: &release_submit_action
  image: espressif/github-hub:2
  when: manual
  allow_failure: true
  before_script:
    - set -o errexit; set -o pipefail; set -o nounset
    - test "${DEBUG_SHELL:-''}" = "1" && set -x
    - git remote remove github || true
    - git remote add github ${GH_REPO_HTTPS}
  variables:
    GIT_STRATEGY: fetch
    GH_REL_TAG: ${CI_COMMIT_TAG}
    SHA256_FILE: openocd-esp32-${CI_COMMIT_TAG}-checksum.sha256

before_script:
  - set -o errexit; set -o pipefail; set -o nounset
  - test "${DEBUG_SHELL:-''}" = "1" && set -x

fetch_gdb:
  stage: fetch_gdb
  variables:
    GIT_STRATEGY: none
  rules:
      - if: $TRIGGERED_BY_GDB_PIPELINE_BRANCH
  needs:
    - project: idf/binutils-gdb
      job: pack-xtensa-arm-linux-gnueabihf
      ref: $TRIGGERED_BY_GDB_PIPELINE_BRANCH
      artifacts: true
    - project: idf/binutils-gdb
      job: pack-riscv32-arm-linux-gnueabihf
      ref: $TRIGGERED_BY_GDB_PIPELINE_BRANCH
      artifacts: true
    - project: idf/binutils-gdb
      job: pack-xtensa-aarch64-linux-gnu
      ref: $TRIGGERED_BY_GDB_PIPELINE_BRANCH
      artifacts: true
    - project: idf/binutils-gdb
      job: pack-riscv32-aarch64-linux-gnu
      ref: $TRIGGERED_BY_GDB_PIPELINE_BRANCH
      artifacts: true
  script:
    - mv dist gdb
    - cd gdb
    - tar -xzf xtensa-esp-elf-gdb*aarch64-linux-gnu.tar.gz
    - tar -xzf riscv32-esp-elf-gdb*aarch64-linux-gnu.tar.gz
    - mv xtensa-esp-elf-gdb xtensa-esp-elf-gdb_arm64
    - mv riscv32-esp-elf-gdb riscv32-esp-elf-gdb_arm64
    - tar -xzf xtensa-esp-elf-gdb*arm-linux-gnueabihf.tar.gz
    - tar -xzf riscv32-esp-elf-gdb*arm-linux-gnueabihf.tar.gz
    - mv xtensa-esp-elf-gdb xtensa-esp-elf-gdb_armhf
    - mv riscv32-esp-elf-gdb riscv32-esp-elf-gdb_armhf
    - rm -f riscv32-esp-elf-gdb*.tar.gz xtensa-esp-elf-gdb*.tar.gz
  artifacts:
    paths:
      - gdb

macos_codesign:
  stage: pre_release
  <<: *release_tag_filter
  when: on_success
  resource_group: macos_codesign
  tags: [ "darwin", "codesign" ]
  # list all jobs that produces macos distros
  needs: [build_macos, build_macos_arm64]
  artifacts:
    paths:
      - ${DIST_ART_DIR}
  variables:
    # directory with distro archives
    DIST_ART_DIR: dist
    # command to unarchive distro
    UNARCHIVE_TOOL: "tar xzf"
    # URL to macos codesign repo
    NOTARIZATION_SCRIPTS_GIT: "${CI_SERVER_PROTOCOL}://gitlab-ci-token:${CI_JOB_TOKEN}@${CI_SERVER_HOST}:${CI_SERVER_PORT}/espressif/macos_codesign_notarization.git"
  script:
    - git clone -q --depth=1 ${NOTARIZATION_SCRIPTS_GIT} -b ${CI_COMMIT_REF_NAME} ||
      git clone -q --depth=1 ${NOTARIZATION_SCRIPTS_GIT}
    - ./macos_codesign_notarization/run.sh

release_tag_draft:
  stage: release_stage1
  tags: [ "amd64", "internet" ]
  <<: *release_tag_filter
  <<: *release_submit_action
  <<: *release_binaries
  script:
    - git remote remove github || true
    - git remote add github ${GH_REPO_HTTPS}
    - hub release show ${GH_REL_TAG} || { echo "Please create a release on GitHub with ${GH_REL_TAG} tag at first"; exit 1; }
    # List of archives
    - DIST_DIR=dist
    - FILES=$(find ${DIST_DIR} -name dist_name_\* -exec cat {} \+)
    - cd ${DIST_DIR}
    - ls -l $FILES
    # Generate checksum file
    - >
      for n in $FILES; do
        sz=$(stat -c%s "${n}") >> ${SHA256_FILE};
        printf "# %s: %s bytes\n" "${n}" "${sz}" >> ${SHA256_FILE};
        sha256sum -b "${n}" >> ${SHA256_FILE};
      done
    # Append FILES with checksum file
    - FILES=$(echo -e "${FILES}\n${SHA256_FILE}")
    - ls -l $FILES
    # Upload archives
    - for n in ${FILES}; do hub release edit -m "" -a "${n}" "${GH_REL_TAG}"; done

Release_tag_submit:
  stage: release_submit
  tags: [ "amd64", "internet" ]
  <<: *release_tag_filter
  <<: *release_submit_action
  script:
    - hub release create -m "${RELEASE_DESC}" ${GH_REL_TAG}

Pre-Release_tag_submit:
  stage: release_submit
  tags: [ "amd64", "internet" ]
  <<: *release_tag_filter
  <<: *release_submit_action
  script:
    - hub release create --prerelease -m "${RELEASE_DESC}" ${GH_REL_TAG}

Delete_tag_release:
  stage: release_submit
  tags: [ "amd64", "internet" ]
  <<: *release_tag_filter
  <<: *release_submit_action
  script:
    - hub release delete ${GH_REL_TAG}

.use_ci_tools: &use_ci_tools |
  curl -sSL ${CIT_LOADER_URL} -o cit_loader.sh && sh cit_loader.sh
  source citools/import_functions

upload_to_http:
  stage: private_deploy
  when: manual
  tags: [ "deploy", "shiny" ]
  only:
    - master
  allow_failure: true
  dependencies:
    - build_linux_armhf
  artifacts:
    reports:
      dotenv: build.env
  before_script:
    - *use_ci_tools
  script:
    - cit_add_ssh_key "${HTTP_UPLOAD_KEY}"
    - ARCHIVE_NAME=$(cat ${DIST_ART_DIR}/dist_name_linux-armhf)
    - pushd ${DIST_ART_DIR}
    - scp ${ARCHIVE_NAME} ${HTTP_UPLOAD_DIR}/openocd/
    - popd
    - OOCD_DISTRO_URL=${HTTP_PUBLIC_DIR}/openocd/${ARCHIVE_NAME}
    - echo "Archive was published there '${OOCD_DISTRO_URL}'"
    - echo "NEW_OOCD_DISTRO_URL=${OOCD_DISTRO_URL}" >> build.env

.test_idf_examples:
  stage: pre_release
  when: manual
  only:
    - master
  allow_failure: true
  needs:
    - job: upload_to_http
      artifacts: true
  variables:
    OOCD_DISTRO_URL: ${NEW_OOCD_DISTRO_URL}
  trigger:
    project: espressif/esp-idf
    strategy: depend
    branch: ${IDF_TEST_BRANCH}

test_idf_master_examples:
  extends:
    - .test_idf_examples
  variables:
    BOT_LABEL_EXAMPLE_TEST: "1"
    IDF_TEST_BRANCH: "master"

test_idf5.4.x_examples:
  extends:
    - .test_idf_examples
  variables:
    IDF_TEST_BRANCH: ${TEST_APP_IDF5_4_RELEASE_BRANCH}

test_idf5.3.x_examples:
  extends:
    - .test_idf_examples
  variables:
    IDF_TEST_BRANCH: ${TEST_APP_IDF5_3_RELEASE_BRANCH}

test_idf5.2.x_examples:
  extends:
    - .test_idf_examples
  variables:
    IDF_TEST_BRANCH: ${TEST_APP_IDF5_2_RELEASE_BRANCH}

test_idf5.1.x_examples:
  extends:
    - .test_idf_examples
  variables:
    IDF_TEST_BRANCH: ${TEST_APP_IDF5_1_RELEASE_BRANCH}

test_idf5.0.x_examples:
  extends:
    - .test_idf_examples
  variables:
    IDF_TEST_BRANCH: ${TEST_APP_IDF5_0_RELEASE_BRANCH}

create_coverage_reports:
  stage: coverage
  tags:
    - build
  allow_failure: true
  artifacts:
    paths:
      - dist/lcov_all_report.tar.gz
      - cov_infos/metrics.txt
      - cov_infos/cobertura.xml
    reports:
      metrics: cov_infos/metrics.txt
      coverage_report:
        coverage_format: cobertura
        path: cov_infos/cobertura.xml
    when: always
    expire_in: 1 week
  needs:
    # idf 5.0.x
    - job: tests_esp32_idf5.0.x
    - job: tests_esp32_idf5.0.x_flash_encrypted
    - job: tests_esp32s2_idf5.0.x
    - job: tests_esp32s2_idf5.0.x_flash_encrypted
    - job: tests_esp32s3_idf5.0.x_dual
    - job: tests_esp32s3_idf5.0.x_single
    - job: tests_esp32c2_idf5.0.x
    - job: tests_esp32c3_idf5.0.x
    - job: tests_esp32c3_idf5.0.x_flash_encrypted
    # idf 5.1.x
    - job: tests_esp32_idf5.1.x
    - job: tests_esp32_idf5.1.x_flash_encrypted
    - job: tests_esp32s2_idf5.1.x
    - job: tests_esp32s2_idf5.1.x_flash_encrypted
    - job: tests_esp32s3_idf5.1.x_dual
    - job: tests_esp32s3_idf5.1.x_single
    - job: tests_esp32c2_idf5.1.x
    - job: tests_esp32c3_idf5.1.x
    - job: tests_esp32c3_idf5.1.x_flash_encrypted
    - job: tests_esp32c6_idf5.1.x
    - job: tests_esp32h2_idf5.1.x
    # idf 5.2.x
    - job: tests_esp32_idf5.2.x
    - job: tests_esp32_idf5.2.x_flash_encrypted
    - job: tests_esp32s2_idf5.2.x
    - job: tests_esp32s2_idf5.2.x_flash_encrypted
    - job: tests_esp32s3_idf5.2.x_dual
    - job: tests_esp32s3_idf5.2.x_single
    - job: tests_esp32c2_idf5.2.x
    - job: tests_esp32c3_idf5.2.x
    - job: tests_esp32c3_idf5.2.x_flash_encrypted
    - job: tests_esp32c6_idf5.2.x
    - job: tests_esp32h2_idf5.2.x
    # idf 5.3.x
    - job: tests_esp32_idf5.3.x
    - job: tests_esp32_idf5.3.x_flash_encrypted
    - job: tests_esp32s2_idf5.3.x
    - job: tests_esp32s2_idf5.3.x_flash_encrypted
    - job: tests_esp32s3_idf5.3.x_dual
    - job: tests_esp32s3_idf5.3.x_single
    - job: tests_esp32c2_idf5.3.x
    - job: tests_esp32c3_idf5.3.x
    - job: tests_esp32c3_idf5.3.x_flash_encrypted
    - job: tests_esp32c6_idf5.3.x
    - job: tests_esp32h2_idf5.3.x
    - job: tests_esp32p4_idf5.3.x
    # idf 5.4.x
    - job: tests_esp32_idf5.4.x
    - job: tests_esp32_idf5.4.x_flash_encrypted
    - job: tests_esp32s2_idf5.4.x
    - job: tests_esp32s2_idf5.4.x_flash_encrypted
    - job: tests_esp32s3_idf5.4.x_dual
    - job: tests_esp32s3_idf5.4.x_single
    - job: tests_esp32c2_idf5.4.x
    - job: tests_esp32c3_idf5.4.x
    - job: tests_esp32c3_idf5.4.x_flash_encrypted
    - job: tests_esp32c6_idf5.4.x
    - job: tests_esp32h2_idf5.4.x
    - job: tests_esp32p4_idf5.4.x
    # idf master
    - job: tests_esp32
    - job: tests_esp32_flash_encrypted
    - job: tests_esp32s2
    - job: tests_esp32s2_flash_encrypted
    - job: tests_esp32s3_dual
    - job: tests_esp32s3_single
    - job: tests_esp32c2
    - job: tests_esp32c3
    - job: tests_esp32c3_flash_encrypted
    - job: tests_esp32c5
    - job: tests_esp32c6
    - job: tests_esp32c61
    - job: tests_esp32h2
    - job: tests_esp32p4
    - job: test_nuttx_esp32
    - job: test_nuttx_esp32s2
    - job: test_nuttx_esp32s3
    - job: test_nuttx_esp32c3
    - job: test_nuttx_esp32c6
    - job: test_nuttx_esp32h2

  script:
    - mkdir -p cov_infos
    - mkdir -p dist
    # Below lines copies all .info files into cov_infos folder
    - >
      folder_list=$(ls -d build_test_app*);
      for each_folder in $folder_list ;
      do
      lcov --gcov-tool ${PWD}/${each_folder}/esp_cov_files/gcov --capture --directory ${each_folder}/esp_cov_files --output-file ${each_folder}/${each_folder}.info;
      done
    - cp `find . -wholename "./build_test_app*/*.info" -size +0` cov_infos
    - ls -la cov_infos/
    # Creating a html report of coverage files.
    - genhtml --ignore-errors source cov_infos/*.info -o lcov_html_report/
    - tar czf dist/lcov_all_report.tar.gz lcov_html_report/
    # Below lines collecting all coverage file names with '-a' flag for lcov merge command.
    - >
      FILES="" ;
      for each_file in cov_infos/*.info ;
      do
      FILES+=" -a ${each_file}" ;
      done
    - lcov ${FILES} -o cov_infos/merged.info
    # Line in below creates a txt file from merged coverage file which includes coverage percentages.
    - lcov --rc lcov_list_width=150 --list cov_infos/merged.info > cov_infos/metrics_input.txt
    - python3 tools/list_to_metrics.py --file cov_infos/metrics_input.txt
    - lcov_cobertura cov_infos/merged.info -o cov_infos/cobertura.xml

update_idf_tools:
  stage: update_idf_tools
  when: manual
  allow_failure: true
  <<: *release_tag_filter
  variables:
    TOOL_NAME: openocd
    TOOL_MEMBERS: openocd-esp32
    TOOL_VERSION: ${CI_COMMIT_TAG}
    TOOL_SHA256_URL: https://github.com/espressif/openocd-esp32/releases/download/${CI_COMMIT_TAG}/openocd-esp32-${CI_COMMIT_TAG}-checksum.sha256
  trigger:
    project: idf/idf-tools-updater
    strategy: depend

include:
  - '.gitlab/ci/util.yml'
  - '.gitlab/ci/build.yml'
  - '.gitlab/ci/build-test-app.yml'
  - '.gitlab/ci/test.yml'
  - '.gitlab/ci/test-sanitizers.yml'
  - '.gitlab/ci/pre-check.yml'
