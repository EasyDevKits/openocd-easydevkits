# SPDX-License-Identifier: GPL-2.0-or-later
#

# Source the ESP common configuration file.
source [find target/esp_common.cfg]

# Target specific global variables
set _CHIPNAME                   "esp32h4"
set _CHIP_LP_NAME               $_CHIPNAME.lp
set _CHIP_HP_NAME               $_CHIPNAME.hp
set _CPUTAPID                   0x001cc25
set _ESP_ARCH                   "riscv"
set _LP_TAPNUM                  0
set _HP_TAPNUM                  1
set _ESP_SMP_TARGET             1
set _ESP_EFUSE_MAC_ADDR_REG     0x5012D044

# If not set until now, set as default dual core.
# When LP core debug is enabled for h4, _ONLYCPU can be set in LP core config file
if { ![info exists _ONLYCPU] } {
	set _ONLYCPU 0x03
}

if { $_ONLYCPU == 0x1 } {
	set _ESP_SMP_TARGET 0
}

# Set workarea address and size
# stub flasher may need a lot of memory in case of compressed writes to flash (~107KB):
# - for apptrace: 2x16KB up buffers + 32KB down buffer
# - for uncompression: 32KB for unzip buffer size + 11KB for inflator data structs
set _WA_ADDR                    0x40810000
set _WA_SIZE                    0x24000

proc esp32h4_wdt_disable { } {
	# Halt event can occur during config phase (before "init" is done).
	# Ignore it since mww commands don't work at that time.
	if { [string compare [command mode] config] == 0 } {
		return
	}

	# Disable TG0 watchdog
	mww 0x60090064 0x50D83AA1
	mww 0x60090048 0
	# Clear TG0 wdt interrupt state
	mww 0x6009007c 0x4

	# Disable TG1 watchdog
	mww 0x60091064 0x50D83AA1
	mww 0x60091048 0
	# Clear TG1 wdt interrupt state
	mww 0x6009107c 0x4

	# Disable LP_WDT_RTC
	mww 0x600B541c 0x50D83AA1
	mww 0x600B5400 0

	# Disable LP_WDT_SWD
	mww 0x600B5424 0x50D83AA1
	mww 0x600B5420 0x40000000

	# Clear LP_WDT_RTC and LP_WDT_SWD interrupt states
	mww 0x600B5430 0xC0000000
}

proc esp32h4_cpu0_wdt_disable { } {
	global _RISCV_DMCONTROL

	# Select hart0
	riscv dmi_write $_RISCV_DMCONTROL       0x80000001
	esp32h4_wdt_disable
}

proc esp32h4_soc_reset { } {
	global _RISCV_DMCONTROL _RISCV_SB_CS _RISCV_SB_ADDR0 _RISCV_SB_DATA0

	riscv dmi_write $_RISCV_DMCONTROL       0x80000001
	riscv dmi_write $_RISCV_SB_CS           0x40000

	# Unstall both CPUs
	# HAL_FORCE_MODIFY_U32_REG_FIELD(LP_AON.cpucore_cfg, aon_cpu_core*_sw_stall, 0xFF);
	riscv dmi_write $_RISCV_SB_ADDR0        0x600B283c
	riscv dmi_write $_RISCV_SB_DATA0        0x00FF00FF
	sleep 10

	# LP_AON_SYS_CFG_REG = LP_AON_HPSYS_SW_RESET
	riscv dmi_write $_RISCV_SB_ADDR0        0x600B2838
	riscv dmi_write $_RISCV_SB_DATA0        0x800000FF

	# LP_AON_CPUCORE_CFG_REG = LP_AON_CPU_CORE0_SW_RESET
	riscv dmi_write $_RISCV_SB_ADDR0        0x600B283c
	riscv dmi_write $_RISCV_SB_DATA0        0x100

	# Wait for the reset to happen
	sleep 10
	poll

	esp32h4_cpu0_wdt_disable

	# Here debugger reads anyhalted and allhalted bits as set (0x3a2)
	# We will clean allhalted state by resuming the core.
	riscv dmi_write $_RISCV_DMCONTROL       0x40000001

	# Put the hart back into reset state. Note that we need to keep haltreq set.
	riscv dmi_write $_RISCV_DMCONTROL       0x80000003
}

# TODO: Test memory protected mode. OCD-1141
proc esp32h4_memprot_is_enabled { } {
	set RAM_LOW     0x40810000
	set RAM_HIGH    0x40860000

	return [pmp_check_region_protected $RAM_LOW $RAM_HIGH]
}


create_esp_target $_ESP_ARCH

# TODO: OCD-1143
# foreach tgt [target names] {
# 	$tgt riscv expose_csrs 848=mclicbase
# 	$tgt riscv expose_csrs 1984=mxstatus
# 	$tgt riscv expose_csrs 1985=mhcr
# 	$tgt riscv expose_csrs 1989=mhint
# 	$tgt riscv expose_csrs 2016=mraddr
# 	$tgt riscv expose_csrs 2017=mexstatus
# 	$tgt riscv expose_csrs 2018=mnmicause
# 	$tgt riscv expose_csrs 2019=mnmipc
# 	$tgt riscv expose_csrs 2020=cpu_testbus_ctrl
# 	$tgt riscv expose_csrs 2051=gpio_oen_user
# 	$tgt riscv expose_csrs 2052=gpio_in_user
# 	$tgt riscv expose_csrs 2053=gpio_out_user
# 	$tgt riscv expose_csrs 2064=pm_user
# 	$tgt riscv expose_csrs 3008=pma_cfg0
# 	$tgt riscv expose_csrs 3009=pma_cfg1
# 	$tgt riscv expose_csrs 3010=pma_cfg2
# 	$tgt riscv expose_csrs 3011=pma_cfg3
# 	$tgt riscv expose_csrs 3012=pma_cfg4
# 	$tgt riscv expose_csrs 3013=pma_cfg5
# 	$tgt riscv expose_csrs 3014=pma_cfg6
# 	$tgt riscv expose_csrs 3015=pma_cfg7
# 	$tgt riscv expose_csrs 3016=pma_cfg8
# 	$tgt riscv expose_csrs 3017=pma_cfg9
# 	$tgt riscv expose_csrs 3018=pma_cfg10
# 	$tgt riscv expose_csrs 3019=pma_cfg11
# 	$tgt riscv expose_csrs 3020=pma_cfg12
# 	$tgt riscv expose_csrs 3021=pma_cfg13
# 	$tgt riscv expose_csrs 3022=pma_cfg14
# 	$tgt riscv expose_csrs 3023=pma_cfg15
# 	$tgt riscv expose_csrs 3024=pma_addr0
# 	$tgt riscv expose_csrs 3025=pma_addr1
# 	$tgt riscv expose_csrs 3026=pma_addr2
# 	$tgt riscv expose_csrs 3027=pma_addr3
# 	$tgt riscv expose_csrs 3028=pma_addr4
# 	$tgt riscv expose_csrs 3029=pma_addr5
# 	$tgt riscv expose_csrs 3030=pma_addr6
# 	$tgt riscv expose_csrs 3031=pma_addr7
# 	$tgt riscv expose_csrs 3032=pma_addr8
# 	$tgt riscv expose_csrs 3033=pma_addr9
# 	$tgt riscv expose_csrs 3034=pma_addr10
# 	$tgt riscv expose_csrs 3035=pma_addr11
# 	$tgt riscv expose_csrs 3036=pma_addr12
# 	$tgt riscv expose_csrs 3037=pma_addr13
# 	$tgt riscv expose_csrs 3038=pma_addr14
# 	$tgt riscv expose_csrs 3039=pma_addr15
# }
