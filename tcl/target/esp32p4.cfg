# SPDX-License-Identifier: GPL-2.0-or-later
#

# Source the ESP common configuration file.
source [find target/esp_common.cfg]

# Target specific global variables
set _CHIPNAME                   "esp32p4"
set _CHIP_HP_NAME               $_CHIPNAME.hp
set _CHIP_LP_NAME               $_CHIPNAME.lp
set _CPUTAPID                   0x0012c25
set _ESP_ARCH                   "riscv"
set _ONLYCPU                    3
set _ESP_SMP_TARGET             1
set _ESP_SMP_BREAK              0
set _ESP_EFUSE_MAC_ADDR_REG     0x5012D044
set _RTOS                       "FreeRTOS"

# Set workarea address and size
# stub flasher may need a lot of memory in case of compressed writes to flash (~107KB):
# - for apptrace: 2x16KB up buffers + 32KB down buffer
# - for uncompression: 32KB for unzip buffer size + 11KB for inflator data structs
set _WA_ADDR                    0x8FF00000
set _WA_SIZE                    0x24000

proc esp32p4_wdt_disable { } {
	global _RISCV_DMCONTROL _RISCV_SB_CS _RISCV_SB_ADDR0 _RISCV_SB_DATA0

	# Disable TG0 watchdog
	riscv dmi_write $_RISCV_SB_CS           0x40000
	riscv dmi_write $_RISCV_SB_ADDR0        0x500c2064
	riscv dmi_write $_RISCV_SB_DATA0        0x50D83AA1

	riscv dmi_write $_RISCV_SB_CS           0x40000
	riscv dmi_write $_RISCV_SB_ADDR0        0x500c2048
	riscv dmi_write $_RISCV_SB_DATA0        0

	# Disable TG1 watchdog
	riscv dmi_write $_RISCV_SB_CS           0x40000
	riscv dmi_write $_RISCV_SB_ADDR0        0x500c3064
	riscv dmi_write $_RISCV_SB_DATA0        0x50D83AA1

	riscv dmi_write $_RISCV_SB_CS           0x40000
	riscv dmi_write $_RISCV_SB_ADDR0        0x500c3048
	riscv dmi_write $_RISCV_SB_DATA0        0
}

proc esp32p4_cpu0_wdt_disable { } {
	global _RISCV_DMCONTROL

	# Select hart0
	riscv dmi_write $_RISCV_DMCONTROL       0x80000001
	esp32p4_wdt_disable
}

proc esp32p4_cpu1_wdt_disable { } {
	global _RISCV_DMCONTROL

	# Select hart1
	riscv dmi_write $_RISCV_DMCONTROL       0x80010001
	esp32p4_wdt_disable
}

proc esp32p4_soc_reset { } {
	global _RISCV_DMCONTROL _RISCV_SB_CS _RISCV_SB_ADDR0 _RISCV_SB_DATA0

	riscv dmi_write $_RISCV_DMCONTROL       0x80000001
	riscv dmi_write $_RISCV_SB_CS           0x40000
	# Writing LP_SYS_SYS_CTRL_REG causes the System Reset
	#Â System Reset: resets the whole digital system, including the LP system.
	riscv dmi_write $_RISCV_SB_ADDR0        0x50110008
	# Set (LP_SYS_SYS_SW_RST|LP_SYS_DIG_FIB|LP_SYS_ANA_FIB|LP_SYS_LP_FIB_SEL)
	riscv dmi_write $_RISCV_SB_DATA0        0x1fffc7fa

	# Wait for the reset to happen
	sleep 10
	poll

	esp32p4_cpu0_wdt_disable

	# Here debugger reads anyhalted and allhalted bits as set (0x3a2)
	# We will clean allhalted state by resuming the core.
	riscv dmi_write $_RISCV_DMCONTROL       0x40000001

	# Put the hart back into reset state. Note that we need to keep haltreq set.
	riscv dmi_write $_RISCV_DMCONTROL       0x80000003
}

proc esp32p4_memprot_is_enabled { } {
	# TODO
	return 0
}

proc set_esp32p4_variables { } {
	global _CHIPNAME _CHIP_LP_NAME _CHIP_HP_NAME
	global _CPUNAME _CPUNAME_0 _CPUNAME_1
	global _TARGETNAME_0 _TARGETNAME_1 _TAPNAME_0 _TAPNAME_1
	global _ESP_WDT_DISABLE _ESP_WDT1_DISABLE _ESP_SOC_RESET _ESP_MEMPROT_IS_ENABLED

	# There are 2 jtag taps with daisy chain connection. tap0 connected to lp core, tap1 connected to dual hp core
	# For now we support only hp core debugging. OCD-772 for the LP Core debugging on C6 and P4
	set _CPUNAME                    cpu
	set _CPUNAME0                   cpu0
	set _CPUNAME1                   cpu1
	set _TARGETNAME_0               $_CHIP_HP_NAME.$_CPUNAME0
	set _TARGETNAME_1               $_CHIP_HP_NAME.$_CPUNAME1
	set _TAPNAME_0                  $_CHIP_HP_NAME.$_CPUNAME
	set _TAPNAME_1                  $_CHIP_HP_NAME.$_CPUNAME

	set _ESP_WDT_DISABLE            "${_CHIPNAME}_cpu0_wdt_disable"
	set _ESP_WDT1_DISABLE           "${_CHIPNAME}_cpu1_wdt_disable"
	set _ESP_SOC_RESET              "${_CHIPNAME}_soc_reset"
	set _ESP_MEMPROT_IS_ENABLED     "${_CHIPNAME}_memprot_is_enabled"
}

proc create_esp32p4_jtag { } {
	global _CHIP_LP_NAME _CHIP_HP_NAME _CPUNAME _CPUTAPID
	jtag newtap $_CHIP_LP_NAME $_CPUNAME -irlen 5 -expected-id $_CPUTAPID
	jtag newtap $_CHIP_HP_NAME $_CPUNAME -irlen 5 -expected-id $_CPUTAPID
}

proc configure_esp32p4_event_reset_assert_post { } {
	global _TARGETNAME_0

	$_TARGETNAME_0 configure -event reset-assert-post {
		esp32p4_soc_reset
	}
}

proc configure_esp32p4_openocd_events { } {
	configure_event_halted
	# TODO: will be added with the SMP changes then we can call configure_openocd_events
	#configure_shutdown_command
	configure_event_examine_fail
	configure_event_examine_end
	configure_esp32p4_event_reset_assert_post
	configure_event_gdb_attach
	configure_event_gdb_detach
}

proc create_esp32p4_target { } {
	set_esp32p4_variables
	create_esp32p4_jtag
	create_openocd_targets
	configure_esp_flash_settings
	configure_esp32p4_openocd_events
	configure_esp_riscv_default_settings
}

create_esp32p4_target

foreach tgt [target names] {
	$tgt riscv expose_csrs 848=mclicbase
	$tgt riscv expose_csrs 1984=mxstatus
	$tgt riscv expose_csrs 1985=mhcr
	$tgt riscv expose_csrs 1989=mhint
	$tgt riscv expose_csrs 2016=mraddr
	$tgt riscv expose_csrs 2017=mexstatus
	$tgt riscv expose_csrs 2018=mnmicause
	$tgt riscv expose_csrs 2019=mnmipc
	$tgt riscv expose_csrs 2020=cpu_testbus_ctrl
	$tgt riscv expose_csrs 2051=gpio_oen_user
	$tgt riscv expose_csrs 2052=gpio_in_user
	$tgt riscv expose_csrs 2053=gpio_out_user
	$tgt riscv expose_csrs 2064=pm_user
	$tgt riscv expose_csrs 3008=pma_cfg0
	$tgt riscv expose_csrs 3009=pma_cfg1
	$tgt riscv expose_csrs 3010=pma_cfg2
	$tgt riscv expose_csrs 3011=pma_cfg3
	$tgt riscv expose_csrs 3012=pma_cfg4
	$tgt riscv expose_csrs 3013=pma_cfg5
	$tgt riscv expose_csrs 3014=pma_cfg6
	$tgt riscv expose_csrs 3015=pma_cfg7
	$tgt riscv expose_csrs 3016=pma_cfg8
	$tgt riscv expose_csrs 3017=pma_cfg9
	$tgt riscv expose_csrs 3018=pma_cfg10
	$tgt riscv expose_csrs 3019=pma_cfg11
	$tgt riscv expose_csrs 3020=pma_cfg12
	$tgt riscv expose_csrs 3021=pma_cfg13
	$tgt riscv expose_csrs 3022=pma_cfg14
	$tgt riscv expose_csrs 3023=pma_cfg15
	$tgt riscv expose_csrs 3024=pma_addr0
	$tgt riscv expose_csrs 3025=pma_addr1
	$tgt riscv expose_csrs 3026=pma_addr2
	$tgt riscv expose_csrs 3027=pma_addr3
	$tgt riscv expose_csrs 3028=pma_addr4
	$tgt riscv expose_csrs 3029=pma_addr5
	$tgt riscv expose_csrs 3030=pma_addr6
	$tgt riscv expose_csrs 3031=pma_addr7
	$tgt riscv expose_csrs 3032=pma_addr8
	$tgt riscv expose_csrs 3033=pma_addr9
	$tgt riscv expose_csrs 3034=pma_addr10
	$tgt riscv expose_csrs 3035=pma_addr11
	$tgt riscv expose_csrs 3036=pma_addr12
	$tgt riscv expose_csrs 3037=pma_addr13
	$tgt riscv expose_csrs 3038=pma_addr14
	$tgt riscv expose_csrs 3039=pma_addr15
}
